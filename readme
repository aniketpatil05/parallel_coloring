Implemented by Elif Naz Samanci, built on Dasgupta's Jones-Plassmann program

This submission contains
1. Input graph files ending with .col
2. Output graph files ending with .col.output
3. parallel_coloring.c (Elif's implementation)
4. jp_coloring.c (Inspiration)
5. Elif_Samanci_Parallel_Coloring.pdf
6. README.txt

---------------
   COMPILE
---------------
mpicc -o out2 parallel_coloring.c
Note that out file is the compiled version of jp_coloring.c and it is compiled the same way.

---------------
	  RUN
---------------

mpirun/mpiexec -np xx ./graphcoloring input_filename output_filename 
	xx: number of proceeses
	input_filename: any of {anna.col, test0.col, test1.col, test3.col, test11.col}
	output_filename: corresponding to input_filename {anna.col.output, test0.col.output, 		test1.col.output, test3.col.output, test11.col.output}

Example: mpirun -np 3 ./graphcoloring input_filename output_filename


-----------------------------------------
     UNDERSTANDING DEBUG STATEMENTS
-----------------------------------------


Unless you comment out the printf statements in the program, it will print the following on the terminal:
1. Adjacency matrix generated by each graph
2. Portions of the matrix given to each process
3. Boundary matrix 
4. Coloring information


---------------------------------
     WHAT WILL BE REVISITED
---------------------------------
1. DEBUG_VERTEX_DISTRIBUTION and DEBUG_PARALLEL_COLORING


---------------------------------
	        COMMENTS
---------------------------------

1. Many print statements were commented out and not deleted, since the code is not complete

----------------------
      FUTURE WORK
----------------------
1. Have every process properly color its vertices (parallel_coloring function on line 236)
	First step to achieving this is to implement a proper sequential algorithm, i.e. color correctly with one process only.
2. Conflict detection phase within the main function using MPI calls (differs from what Boman proposes)
	This will use the boundary matrix.
	On a conflict edge, the higher ranked matrix sends its color information, smaller rank receives and changes its conflict vertex.
3. Experiment with synchronous and asynchronous implementations
	This is discussed in detail in Boman paper.
	

